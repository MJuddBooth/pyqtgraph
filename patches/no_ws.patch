diff --git a/pyqtgraph/exporters/PrintExporter.py b/pyqtgraph/exporters/PrintExporter.py
index 530a180..625d5f1 100644
--- a/pyqtgraph/exporters/PrintExporter.py
+++ b/pyqtgraph/exporters/PrintExporter.py
@@ -65,4 +65,4 @@ class PrintExporter(Exporter):
         painter.end()
 
 
-#PrintExporter.register()        
+PrintExporter.register()
diff --git a/pyqtgraph/graphicsItems/LabelItem.py b/pyqtgraph/graphicsItems/LabelItem.py
index 37980ee..59f8bfb 100644
--- a/pyqtgraph/graphicsItems/LabelItem.py
+++ b/pyqtgraph/graphicsItems/LabelItem.py
@@ -58,7 +58,7 @@ class LabelItem(GraphicsWidget, GraphicsWidgetAnchor):
         color = fn.mkColor(color)
         optlist.append('color: #' + fn.colorStr(color)[:6])
         if 'size' in opts:
-            optlist.append('font-size: ' + opts['size'])
+            optlist.append('font-size: ' + str(opts['size']))
         if 'bold' in opts and opts['bold'] in [True, False]:
             optlist.append('font-weight: ' + {True:'bold', False:'normal'}[opts['bold']])
         if 'italic' in opts and opts['italic'] in [True, False]:
diff --git a/pyqtgraph/graphicsItems/LegendItem.py b/pyqtgraph/graphicsItems/LegendItem.py
index eebf4a0..a8363f4 100644
--- a/pyqtgraph/graphicsItems/LegendItem.py
+++ b/pyqtgraph/graphicsItems/LegendItem.py
@@ -20,7 +20,7 @@ class LegendItem(GraphicsWidget, GraphicsWidgetAnchor):
 
     """
     def __init__(self, size=None, offset=None, pen=None, brush=None, textSize=None, 
-                 textBold=None, textItalic=None):
+                 textBold=None, textItalic=None, sampleScale=1):
         """
         ==============  ===============================================================
         **Arguments:**
@@ -52,7 +52,7 @@ class LegendItem(GraphicsWidget, GraphicsWidgetAnchor):
         self.pen = pen if pen else fn.mkPen(255,255,255,100) 
         self.brush = brush if brush else fn.mkBrush(100,100,100,50)
 
-        self.labelOptions = dict(size=textSize, bold=textBold, italic=textItalic)   
+        self.labelOptions = dict(size=textSize, bold=textBold, italic=textItalic, sampleScale=sampleScale)   
         self.labelOptions = {k:v for k, v in self.labelOptions.items() if v is not None}
         
     def setParentItem(self, p):
@@ -84,7 +84,7 @@ class LegendItem(GraphicsWidget, GraphicsWidgetAnchor):
         if isinstance(item, ItemSample):
             sample = item
         else:
-            sample = ItemSample(item)        
+            sample = ItemSample(item, sampleScale=opts['sampleScale'])        
         row = self.layout.rowCount()
         self.items.append((sample, label))
         self.layout.addItem(sample, row, 0)
@@ -143,9 +143,13 @@ class LegendItem(GraphicsWidget, GraphicsWidgetAnchor):
             self.autoAnchor(self.pos() + dpos)
     
     def setTextSize(self, size):
-        if isinstance(size, int):
-            size = str(size) + "pt"
-        self.labelOptions["size"] = size
+        self.setTextOption(size=size)
+
+    def setTextOption(self, **opts):
+        for k, v in opts.items():
+            if k.lower() == "size" and isinstance(v, int):
+                v = str(v) + "pt"
+            self.labelOptions[k] = v
 
     def setTextBold(self, bold):
         self.lableOptions["bold"] = bold
@@ -157,10 +161,12 @@ class LegendItem(GraphicsWidget, GraphicsWidgetAnchor):
         self.pen = fn.mkPen(pen)
 
     def setBrush(self, brush):
-        self.pen = fn.mkBrush(brush)
+        self.brush = fn.mkBrush(brush)
         
     def setOpacity(self, level):
-        self.brush.setAlpha(level)
+        color = self.brush.color()
+        color.setAlpha(level)
+        self.brush.setColor(color)
         
 class ItemSample(GraphicsWidget):
     """ Class responsible for drawing a single item in a LegendItem (sans label).
@@ -168,9 +174,10 @@ class ItemSample(GraphicsWidget):
     This may be subclassed to draw custom graphics in a Legend.
     """
     ## Todo: make this more generic; let each item decide how it should be represented.
-    def __init__(self, item):
+    def __init__(self, item, sampleScale=1):
         GraphicsWidget.__init__(self)
         self.item = item
+        self.sampleScale = sampleScale
         
     def boundingRect(self):
         return QtCore.QRectF(0, 0, 20, 20)
@@ -185,7 +192,12 @@ class ItemSample(GraphicsWidget):
             p.drawPolygon(QtGui.QPolygonF([QtCore.QPointF(2,18), QtCore.QPointF(18,2), QtCore.QPointF(18,18)]))
         
         if not isinstance(self.item, ScatterPlotItem):
-            p.setPen(fn.mkPen(opts['pen']))
+            pen = opts['pen']
+            if isinstance(pen, QtGui.QPen):
+                newpen = fn.mkPen(pen, width=pen.width() * self.sampleScale)
+            else:
+                newpen = fn.mkPen(pen, width=self.sampleScale)
+            p.setPen(newpen)
             p.drawLine(2, 18, 18, 2)
         
         symbol = opts.get('symbol', None)
diff --git a/pyqtgraph/graphicsItems/ScatterPlotItem.py b/pyqtgraph/graphicsItems/ScatterPlotItem.py
index e6be9ac..0710044 100644
--- a/pyqtgraph/graphicsItems/ScatterPlotItem.py
+++ b/pyqtgraph/graphicsItems/ScatterPlotItem.py
@@ -182,7 +182,7 @@ class SymbolAtlas(object):
 
         self.atlasData = np.zeros((width, height, 4), dtype=np.ubyte)
         for key in symbols:
-            y, x, h, w = self.symbolMap[key].getRect()
+            y, x, h, w = map(int, self.symbolMap[key].getRect())
             self.atlasData[x:x+w, y:y+h] = rendered[key]
         self.atlas = None
         self.atlasValid = True
