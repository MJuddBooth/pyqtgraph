diff --git a/pyqtgraph/graphicsItems/LabelItem.py b/pyqtgraph/graphicsItems/LabelItem.py
index 37980ee..59f8bfb 100644
--- a/pyqtgraph/graphicsItems/LabelItem.py
+++ b/pyqtgraph/graphicsItems/LabelItem.py
@@ -58,7 +58,7 @@ class LabelItem(GraphicsWidget, GraphicsWidgetAnchor):
         color = fn.mkColor(color)
         optlist.append('color: #' + fn.colorStr(color)[:6])
         if 'size' in opts:
-            optlist.append('font-size: ' + opts['size'])
+            optlist.append('font-size: ' + str(opts['size']))
         if 'bold' in opts and opts['bold'] in [True, False]:
             optlist.append('font-weight: ' + {True:'bold', False:'normal'}[opts['bold']])
         if 'italic' in opts and opts['italic'] in [True, False]:
diff --git a/pyqtgraph/graphicsItems/LegendItem.py b/pyqtgraph/graphicsItems/LegendItem.py
index 20d6416..63eeb76 100644
--- a/pyqtgraph/graphicsItems/LegendItem.py
+++ b/pyqtgraph/graphicsItems/LegendItem.py
@@ -19,7 +19,8 @@ class LegendItem(GraphicsWidget, GraphicsWidgetAnchor):
         legend.setParentItem(plotItem)
 
     """
-    def __init__(self, size=None, offset=None):
+    def __init__(self, size=None, offset=None, pen=None, brush=None, textSize=None, 
+                 textBold=None, textItalic=None, sampleScale=1):
         """
         ==============  ===============================================================
         **Arguments:**
@@ -46,6 +47,13 @@ class LegendItem(GraphicsWidget, GraphicsWidgetAnchor):
         self.offset = offset
         if size is not None:
             self.setGeometry(QtCore.QRectF(0, 0, self.size[0], self.size[1]))
+
+        
+        self.pen = pen if pen else fn.mkPen(255,255,255,100) 
+        self.brush = brush if brush else fn.mkBrush(100,100,100,50)
+
+        self.labelOptions = dict(size=textSize, bold=textBold, italic=textItalic, sampleScale=sampleScale)
+        self.labelOptions = {k:v for k, v in self.labelOptions.items() if v is not None}
         
     def setParentItem(self, p):
         ret = GraphicsWidget.setParentItem(self, p)
@@ -57,7 +65,7 @@ class LegendItem(GraphicsWidget, GraphicsWidgetAnchor):
             self.anchor(itemPos=anchor, parentPos=anchor, offset=offset)
         return ret
         
-    def addItem(self, item, name):
+    def addItem(self, item, name, **kwargs):
         """
         Add a new entry to the legend. 
 
@@ -70,17 +78,20 @@ class LegendItem(GraphicsWidget, GraphicsWidgetAnchor):
         title           The title to display for this item. Simple HTML allowed.
         ==============  ========================================================
         """
-        label = LabelItem(name)
+        opts = self.labelOptions.copy()
+        opts.update(kwargs)
+        label = LabelItem(name, **opts)
         if isinstance(item, ItemSample):
             sample = item
         else:
-            sample = ItemSample(item)        
+            sample = ItemSample(item, sampleScale=opts['sampleScale'])
         row = self.layout.rowCount()
         self.items.append((sample, label))
         self.layout.addItem(sample, row, 0)
         self.layout.addItem(label, row, 1)
         self.updateSize()
-    
+
+           
     def removeItem(self, name):
         """
         Removes one item from the legend. 
@@ -119,8 +130,8 @@ class LegendItem(GraphicsWidget, GraphicsWidgetAnchor):
         return QtCore.QRectF(0, 0, self.width(), self.height())
     
     def paint(self, p, *args):
-        p.setPen(fn.mkPen(255,255,255,100))
-        p.setBrush(fn.mkBrush(100,100,100,50))
+        p.setPen(self.pen)
+        p.setBrush(self.brush)
         p.drawRect(self.boundingRect())
 
     def hoverEvent(self, ev):
@@ -130,6 +141,32 @@ class LegendItem(GraphicsWidget, GraphicsWidgetAnchor):
         if ev.button() == QtCore.Qt.LeftButton:
             dpos = ev.pos() - ev.lastPos()
             self.autoAnchor(self.pos() + dpos)
+    
+    def setTextSize(self, size):
+        self.setTextOption(size=size)
+
+    def setTextOption(self, **opts):
+        for k, v in opts.items():
+            if k.lower() == "size" and isinstance(v, int):
+                v = str(v) + "pt"
+            self.labelOptions[k] = v
+
+    def setTextBold(self, bold):
+        self.lableOptions["bold"] = bold
+  
+    def setTextItalic(self, italic):
+        self.lableOptions["italic"] = italic
+
+    def setPen(self, pen):
+        self.pen = fn.mkPen(pen)
+
+    def setBrush(self, brush):
+        self.brush = fn.mkBrush(brush)
+        
+    def setOpacity(self, level):
+        color = self.brush.color()
+        color.setAlpha(level)
+        self.brush.setColor(color)
         
 class ItemSample(GraphicsWidget):
     """ Class responsible for drawing a single item in a LegendItem (sans label).
@@ -137,9 +174,10 @@ class ItemSample(GraphicsWidget):
     This may be subclassed to draw custom graphics in a Legend.
     """
     ## Todo: make this more generic; let each item decide how it should be represented.
-    def __init__(self, item):
+    def __init__(self, item, sampleScale=1):
         GraphicsWidget.__init__(self)
         self.item = item
+        self.sampleScale = sampleScale
     
     def boundingRect(self):
         return QtCore.QRectF(0, 0, 20, 20)
@@ -154,7 +192,12 @@ class ItemSample(GraphicsWidget):
             p.drawPolygon(QtGui.QPolygonF([QtCore.QPointF(2,18), QtCore.QPointF(18,2), QtCore.QPointF(18,18)]))
         
         if not isinstance(self.item, ScatterPlotItem):
-            p.setPen(fn.mkPen(opts['pen']))
+            pen = opts['pen']
+            if isinstance(pen, QtGui.QPen):
+                newpen = fn.mkPen(pen, width=pen.width() * self.sampleScale)
+            else:
+                newpen = fn.mkPen(pen, width=self.sampleScale)
+            p.setPen(newpen)
             p.drawLine(2, 18, 18, 2)
         
         symbol = opts.get('symbol', None)
